/*
 * Copyright 2017 greg.
 *
 * This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. 
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ 
 * or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 * 
 * You are free to:
 *     Share - copy and redistribute the material in any medium or format
 *     Adapt - remix, transform, and build upon the material
 * 
 *     The licensor cannot revoke these freedoms as long as you follow the license terms.               
 *     Under the following terms:
 *                 
 *         Attribution - 
 *             You must give appropriate credit, provide a link to the license, and indicate if changes were made. 
 *             You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.
 *         NonCommercial - 
 *             You may not use the material for commercial purposes.
 *         ShareAlike - 
 *             If you remix, transform, or build upon the material, 
 *             you must distribute your contributions under the same license as the original.
 *         No additional restrictions - 
 *             You may not apply legal terms or technological measures that legally restrict others from doing anything the 
 *             license permits.
 * 
 * Check the Creative Commons website for any details, legalese, and updates.
 */
package nz.co.gregs.dbvolution.databases;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

/**
 *
 * @author greg
 */
public interface DBConnection {

	public DBStatement createDBStatement() throws SQLException;

	public PreparedStatement prepareStatement(String sql) throws SQLException;

	public CallableStatement prepareCall(String sql) throws SQLException;

	public String nativeSQL(String sql) throws SQLException;

	public void setAutoCommit(boolean autoCommit) throws SQLException;

	public boolean getAutoCommit() throws SQLException;

	public void commit() throws SQLException;

	public void rollback() throws SQLException;

	public void close() throws SQLException;

	public boolean isClosed() throws SQLException;

	public DatabaseMetaData getMetaData() throws SQLException;

	public void setReadOnly(boolean readOnly) throws SQLException;

	public boolean isReadOnly() throws SQLException;

	public void setCatalog(String catalog) throws SQLException;

	public String getCatalog() throws SQLException;

	public void setTransactionIsolation(int level) throws SQLException;

	public int getTransactionIsolation() throws SQLException;

	public SQLWarning getWarnings() throws SQLException;

	public void clearWarnings() throws SQLException;

	public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException;

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException;

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException;

	public Map<String, Class<?>> getTypeMap() throws SQLException;

	public void setTypeMap(Map<String, Class<?>> map) throws SQLException;

	public void setHoldability(int holdability) throws SQLException;

	public int getHoldability() throws SQLException;

	public Savepoint setSavepoint() throws SQLException;

	public Savepoint setSavepoint(String name) throws SQLException;

	public void rollback(Savepoint savepoint) throws SQLException;

	public void releaseSavepoint(Savepoint savepoint) throws SQLException;

	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException;

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException;

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException;

	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException;

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException;

	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException;

	public Clob createClob() throws SQLException;

	public Blob createBlob() throws SQLException;

	public NClob createNClob() throws SQLException;

	public SQLXML createSQLXML() throws SQLException;

	public boolean isValid(int timeout) throws SQLException;

	public void setClientInfo(String name, String value) throws SQLClientInfoException;

	public void setClientInfo(Properties properties) throws SQLClientInfoException;

	public String getClientInfo(String name) throws SQLException;

	public Properties getClientInfo() throws SQLException;

	public Array createArrayOf(String typeName, Object[] elements) throws SQLException;

	public Struct createStruct(String typeName, Object[] attributes) throws SQLException;

	public void setSchema(String schema) throws SQLException;

	public String getSchema() throws SQLException;

	public void abort(Executor executor) throws SQLException;

	public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException;

	public int getNetworkTimeout() throws SQLException;

	public <T> T unwrap(Class<T> iface) throws SQLException;

	public boolean isWrapperFor(Class<?> iface) throws SQLException;

	public Statement getInternalStatement() throws SQLException;

}
